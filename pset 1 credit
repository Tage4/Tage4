#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

char* strrev(char*);

int main(void) {
    char input[20]; // 16 digits plus 1 for newline plus 1 for null terminator
    int len, i, j, sum = 0, digit, product;

    // Prompt user for input
    printf("Enter a credit card number: ");
    fgets(input, sizeof(input), stdin);

    // Strip newline character from input
    len = strlen(input);
    if (len > 0 && input[len - 1] == '\n') {
        input[len - 1] = '\0';
    }

    // Check that input is all digits and within the valid length range
    if (strlen(input) < 13 || strlen(input) > 16 || !isdigit(input[0])) {
        printf("Invalid input\n");
        return 0;
    }

    // Check for invalid starting digits
    if ((input[0] == '3' && (input[1] == '4' || input[1] == '7')) ||
        (input[0] == '5' && (input[1] == '1' || input[1] == '2' || input[1] == '3' ||
                             input[1] == '4' || input[1] == '5'))) {
        printf("Invalid starting digits\n");
        return 0;
    }

    // Reverse input to simplify digit iteration
    strrev(input);

    // Multiply every other digit by 2, starting with the number’s second-to-last digit,
    // and add those products’ digits together
    for (i = 1; i < strlen(input); i += 2) {
        digit = input[i] - '0';
        product = digit * 2;
        while (product > 0) {
            sum += product % 10;
            product /= 10;
        }
    }

    // Add the sum of the remaining digits to the sum of the products
    for (j = 0; j < strlen(input); j += 2) {
        sum += input[j] - '0';
    }

    // If the total’s last digit is 0, the number is valid
    if (sum % 10 == 0) {
        printf("Valid\n");
    } else {
        printf("Invalid\n");
    }

    return 0;
}

char* strrev(char* str) {
    char temp;
    int i, j;

    for (i = 0, j = strlen(str) - 1; i < j; i++, j--) {
        temp = str[i];
        str[i] = str[j];
        str[j] = temp;
    }

    return str;
}
